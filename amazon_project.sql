/* AMAZON SQL PROJECT */


/* Creating category table */

CREATE TABLE category
(
category_id INT PRIMARY KEY,
category_name VARCHAR(50)
);


/* Creating customers table */

CREATE TABLE customers
(
customer_id INT PRIMARY KEY,
first_name VARCHAR(50),
last_name VARCHAR(50),
state VARCHAR(50)
);


/* Creating sellers table */

CREATE TABLE sellers
(
seller_id INT PRIMARY KEY,
seller_name VARCHAR(50),
origin VARCHAR(10)
);


/* Creating product table */

CREATE TABLE products
(
product_id INT PRIMARY KEY,
product_name VARCHAR(50),
price FLOAT,
cogs FLOAT,
category_id INT,
CONSTRAINT fk_product_category FOREIGN KEY (category_id) REFERENCES category(category_id) 
);


/* Creating order table */

CREATE TABLE orders
(
order_id INT PRIMARY KEY,
order_date DATE,
customer_id INT,
seller_id INT,
order_status VARCHAR(50),
CONSTRAINT fk_orders_customers FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
CONSTRAINT fk_orders_sellers FOREIGN KEY (seller_id) REFERENCES sellers(seller_id)
);


/* Creating order_items table */

CREATE TABLE order_items
(
order_item_id INT PRIMARY KEY,
order_id INT,
product_id INT,
quantity INT,
price_per_unit FLOAT,
CONSTRAINT fk_order_items_orders FOREIGN KEY (order_id) REFERENCES orders(order_id),
CONSTRAINT fk_order_items_prodcuts FOREIGN KEY (product_id) REFERENCES products(product_id)
);


/* Creating payments table */

CREATE TABLE payments
(
payment_id INT PRIMARY KEY,
order_id INT,
payment_date DATE,
payment_status VARCHAR(50),
CONSTRAINT fk_payments_orders FOREIGN KEY (order_id) REFERENCES orders(order_id)
);


/* Creating shipping table */

CREATE TABLE shipping
(
shipping_id INT PRIMARY KEY,
order_id INT,
shipping_date DATE,
return_date DATE,
shipping_provider VARCHAR(50),
delivery_status VARCHAR(50),
CONSTRAINT fk_shipping_orders FOREIGN KEY (order_id) REFERENCES orders(order_id)
);


/* Creating inventory table */

CREATE TABLE inventory
(
inventory_id INT PRIMARY KEY,
product_id INT,
stock INT,
warehouse_id INT,
last_stock_date DATE,
CONSTRAINT fk_inventory_products FOREIGN KEY (product_id) REFERENCES products(product_id)
);


/*
1. Top Selling Products
Query the top 10 products by total sales value.
Challenge: Include product name, total quantity sold, and total sales value.
*/


ALTER TABLE order_items
ADD COLUMN total_sales FLOAT;

UPDATE order_items
SET total_sales = (quantity * price_per_unit);

SELECT p.product_name,CAST(SUM(oi.total_sales) AS INT) AS total_sales,
COUNT(oi.order_id) AS quantity_sold
FROM products p JOIN order_items oi
ON p.product_id = oi.product_id
GROUP BY product_name
ORDER BY total_sales DESC
LIMIT 10;


/*
2. Revenue by Category
Calculate total revenue generated by each product category.
Calculate the percentage contribution of each category.
*/


SELECT p.category_id,c.category_name,SUM(oi.total_sales) AS total_sales,
SUM(oi.total_sales) / (SELECT SUM(total_sales) FROM order_items) * 100 AS percentage_contribution
FROM products p JOIN category c
ON p.category_id = c.category_id
JOIN order_items oi ON p.product_id = oi.product_id
GROUP BY p.category_id,category_name
ORDER BY total_sales DESC;


/*
3. Average Order Value (AOV)
Compute the average order value for each customer.
Include only customers with more than 5 orders.
*/


SELECT c.customer_id,CONCAT(c.first_name,' ',c.last_name) AS customer_name,
SUM(oi.total_sales)/COUNT(o.order_id) AS Average_order_value,COUNT(o.order_id)
FROM customers c JOIN orders o
ON c.customer_id = o.customer_id
JOIN order_items oi ON o.order_id = oi.order_id
GROUP BY c.customer_id,customer_name
HAVING COUNT(o.order_id) > 5;


/*
4. Monthly Sales Trend
Query monthly total sales over the past year.
*/


SELECT EXTRACT(MONTH FROM o.order_date) AS month,
EXTRACT(YEAR FROM o.order_date) AS year,
SUM(oi.total_sales) FROM orders o JOIN order_items oi
ON o.order_id = oi.order_id
WHERE o.order_date >= CURRENT_DATE - INTERVAL '1 YEAR'
GROUP BY 1,2
ORDER BY year,month;


/*
5. Customers with No Purchases
Find customers who have registered but never placed an order.

*/

SELECT c.customer_id,CONCAT(c.first_name,' ',c.last_name) AS customer_name,
state
FROM customers as c
LEFT JOIN
orders as o
ON o.customer_id = c.customer_id
WHERE o.customer_id IS NULL


/*
6. Least-Selling Categories by State
Identify the least-selling product category for each state.
Challenge: Include the total sales for that category within each state.
*/


WITH ranking_table
AS
(
SELECT c.state,cat.category_name,
SUM(oi.total_sales) as total_sales,
RANK() OVER(PARTITION BY c.state ORDER BY SUM(oi.total_sales) ASC) as rank
FROM orders o JOIN 
customers c
ON o.customer_id = c.customer_id JOIN
order_items oi
ON o.order_id = oi. order_id JOIN 
products p
ON oi.product_id = p.product_id JOIN
category cat
ON cat.category_id = p.category_id
GROUP BY 1, 2
)
SELECT 
*
FROM ranking_table
WHERE rank = 1;



/*
7. Customer Lifetime Value (CLTV)
Calculate the total value of orders placed by each customer over their lifetime.
Rank customers based on their CLTV.
*/


SELECT c.customer_id,CONCAT(c.first_name, ' ',  c.last_name) as full_name,
SUM(total_sales) as CLTV,
RANK() OVER(ORDER BY SUM(total_sales) DESC) as customer_ranking
FROM orders o
JOIN customers c
ON c.customer_id = o.customer_id
JOIN order_items oi
ON oi.order_id = o.order_id
GROUP BY 1, 2;



/*
8. Top Performing Sellers
Find the top 5 sellers based on total sales value.
*/


SELECT s.seller_id,s.seller_name,SUM(total_sales) AS total_sales 
FROM  orders as o
JOIN 
sellers s
ON o.seller_id = s.seller_id
JOIN 
order_items as oi
ON oi.order_id = o.order_id
GROUP BY 1,2
ORDER BY 3 DESC
LIMIT 5;



/*
9. Product Profit Margin
Calculate the profit margin for each product (difference between price and cost of goods sold).
Rank products by their profit margin, showing highest to lowest.
*/


SELECT product_id,product_name,
profit_margin,
RANK() OVER( ORDER BY profit_margin DESC) as product_ranking
FROM
(SELECT p.product_id,
p.product_name,
SUM(total_sales - (p.cogs * oi.quantity))/sum(total_sales) * 100 as profit_margin
FROM order_items as oi
JOIN 
products as p
ON oi.product_id = p.product_id
GROUP BY 1, 2
) as t1



/*
10. Most Returned Products
Query the top 10 products by the number of returns.
Challenge: Display the return rate as a percentage of total units sold for each product.
*/



SELECT 
	p.product_id,
	p.product_name,
	COUNT(*) as total_unit_sold,
	SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END) as total_returned,
	SUM(CASE WHEN o.order_status = 'Returned' THEN 1 ELSE 0 END)::numeric/COUNT(*)::numeric * 100 as return_percentage
FROM order_items as oi
JOIN 
products as p
ON oi.product_id = p.product_id
JOIN orders as o
ON o.order_id = oi.order_id
GROUP BY 1, 2
ORDER BY 5 DESC
LIMIT 10;


/*
11. Revenue by Shipping Provider
Calculate the total revenue handled by each shipping provider.
Challenge: Include the total number of orders handled and the average delivery time for each provider.
*/


SELECT 
	s.shipping_provider,
	COUNT(o.order_id) as order_handled,
	SUM(oi.total_sales) as total_sale,
	COALESCE(AVG(s.return_date - s.shipping_date), 0) as average_days
FROM orders as o
JOIN 
order_items as oi
ON oi.order_id = o.order_id
JOIN 
shipping s
ON 
s.order_id = o.order_id
GROUP BY 1











